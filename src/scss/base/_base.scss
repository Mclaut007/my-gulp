// В font-size можно записать самый частый размер шрифта на сайте, в font-family - самый частое семейство шрифта.

body {
  font-family: var(--main-font-family);
  color: var(--main-color);
  font-size: rem(14);
  font-weight: 400;
  line-height: 1.4;
  // color: $mainColor;
  // overflow-wrap: break-word;
  // word-wrap: break-word;
}

.wrapper {
  overflow: hidden;
  // overflow-x: hidden;
  // overflow-y: auto;
  display: flex;
  flex-direction: column;
  min-height: 100%;
}

/*------------------*/

// Функция возвращает размер шрифта в rem (переводит из пикселей в rem). По умолчанию в браузерах это 16px. В стилях для конкретного текста можно писать font-size: rem(32); Это пример. Тогда в файле css окажется 2rem. 16px - это размер по умолчанию в браузерах. $size пишем без 'px'.

[class$="__container"],
[class$="-container"] {
  max-width: $maxWidth;
  min-width: $minWidth;
  padding: 0 rem(15);
  margin: 0 auto;
}

.main {
  flex-grow: 1;
}

body._lock {
  overflow: hidden;
}

/* Поменяем стили для кнопки. Оказывается, flex не нужен. Нужно просто поменять display на block (по умолчанию inline-block). Тогда между кнопкой и другими элементами не будет зазоров и кнопку можно будет центрировать по горизонтали с помощью margin: 0 auto; Не нужно, как в случае c display: flex, писать width: fit-content, justify-content: center; align-items: center; text-align: center. У элемента button даже если ему сделать display: block ширина все равно задается содержимым (а не 100% она будет), а содержимое кнопки по горизонтали и вертикали выравнивается по центру. И text-align: center тут делается автоматически. */

.button {
  /* Поменять значения свойств на те, что по дизайн-макету */
  font-size: 1rem;
  min-height: 3rem;
  padding: 1rem 2rem;
  border: 1px solid red;
  border-radius: 0.5rem;
  font-weight: 500;
  background: red;
  color: #fff;
  display: block;
  /* Строки для display flex ниже не используем. 
  Мы заменили flex на block */
  /* display: flex;
  justify-content: center;
  align-items: center;
  width: fit-content; */
  user-select: none;
  transition:
    background-color 0.3s ease,
    color 0.3s ease;
}
@media (any-hover: hover) and (pointer: fine) {
  .button:hover {
    background-color: transparent;
    color: red;
  }
}

/*--------- visually-hidden ---------*/

// Класс, который можно использовать для элементов, которые  нужно скрыть, но так, чтобы скринридеры их видели. Например, заголовок, который должен по логике быть, но по дизайн-макету его нет. По скрытым таким способам ссылкам и кнопкам будет при табе происходить фокусировка, что будет не видно.
// При display: none; ни поисковики, ни скринридеды не видят скрытый элемент. Атрибут hidden может заменить display: none;
// Если нужно сделать плавное появление и исчезновение выпадающего меню можно использовать visibility и opacity (hidden и 0). Но при этом нужно, чтобы элемент был спозиционирован абсолютно. Иначе он будет продолжать занимать место в разметке. Поисковики будут видеть элемент, скринридеры - нет.
//Вариант: opacity: 0; pointer-events: none; (и поисковики, и скринридеры видят элемент, элемент занимает место в разметке, как и в варианте выше). Делает то же самое.
// Исчезновение блока можно сделать с помощью спойлера (за счет height: 0;). В этом случае исчезновение/появление анимируется. И скрытый элемент будут видеть и поисковики, и скринридеры. Но в случае с height: auto; height не анимируется. Нужно, чтобы оба значения height были числами. Плюс нужно убирать паддинги и бордеры (при height: 0 они остаются видны).

.visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  border: 0;
  padding: 0;
  white-space: nowrap;
  clip-path: inset(100%);
  clip: rect(0, 0, 0, 0);
  overflow: hidden;
}

/*------------------*/

// Класс none - чтобы временно скрывать блоки во время разработки

.none {
  display: none !important;
}
